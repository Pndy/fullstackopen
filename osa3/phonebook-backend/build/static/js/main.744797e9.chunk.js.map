{"version":3,"sources":["services/contacts.js","PersonsList.js","PersonsForm.js","Filter.js","Notification.js","App.js","index.js"],"names":["baseUrl","contactService","getAll","axios","get","then","response","data","create","newContact","post","deleteById","id","delete","update","updatedContact","put","PersonsList","contacts","setContacts","filterName","setNotification","contactList","filter","person","name","toLowerCase","includes","map","number","onClick","existingContact","find","contact","window","confirm","text","type","setTimeout","catch","error","deleteContact","PersonsForm","useState","newName","setNewName","newNumber","setNewNumber","value","onChange","event","target","e","preventDefault","some","updateContacts","newContacts","concat","alert","handleNewContact","Filter","setFilterName","Notification","message","className","App","notification","useEffect","initialContacts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.744797e9.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => {\n        return response.data\n    })\n}\n\nconst create = newContact => {\n    const request = axios.post(baseUrl, newContact)\n    return request.then(response => response.data)\n}\n\nconst deleteById = id => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n}\n\nconst update = (id, updatedContact) => {\n    const request = axios.put(`${baseUrl}/${id}`, updatedContact)\n    return request.then(response => response.data)\n}\n\nconst contactService = {\n    getAll,\n    create,\n    deleteById,\n    update\n}\n\nexport default contactService;","import contactService from './services/contacts'\n\nconst PersonsList = ({contacts, setContacts, filterName, setNotification}) => {\n  \n  const contactList =\n    filterName === '' ?\n      contacts :\n      contacts.filter(person => person.name.toLowerCase().includes(filterName.toLowerCase()))\n\n  const deleteContact = (id) => {\n    let existingContact = contacts.find(contact => contact.id === id)\n\n    if(!window.confirm(`Delete contact ${existingContact.name}?`)){\n      return\n    }\n    contactService\n      .deleteById(id)\n      .then(response => {\n        const updatedContact = contacts.filter(person => person.id !== id)\n        setContacts(updatedContact)\n        setNotification({\n          text: `Deleted contact ${existingContact.name}`,\n          type: 'success'\n        })\n        setTimeout(() => {\n          setNotification('')\n        }, 3000)\n      })\n      .catch(error => {\n        const updatedContact = contacts.filter(person => person.id !== id)\n        setContacts(updatedContact)\n        \n        setNotification({\n          text: `Information of ${existingContact.name} has already been deleted`,\n          type: 'error'\n        })\n        setTimeout(() => {\n          setNotification('')\n        }, 3000)\n      })\n  }\n\n  return (\n    <div>\n      {contactList.map(person => \n        <li key={person.id}>{person.id}: {person.name} {person.number} <button onClick={()=>deleteContact(person.id)}>Delete</button></li>\n      )}\n    </div>\n  )\n}\n\nexport default PersonsList"," import {useState} from \"react\";\n\n import contactService from './services/contacts'\n\n\nconst PersonsForm = ({contacts, setContacts, setNotification}) => {\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber] = useState('')\n\n\n  const changeNewName = (event) => {\n    setNewName(event.target.value)\n  }\n  const changeNewNumber = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const handleNewContact = (e) => {\n    // pevent from submit\n    e.preventDefault()\n\n\n    // make sure name isnt in list already\n    if (contacts.some(person => person.name === newName)) {\n      // Find contact from list\n      let existingContact = contacts.find(contact => contact.name === newName)\n\n      if(window.confirm(`${newName} already added. want to update number?`)){\n        // Update in database\n        existingContact.number = newNumber\n        contactService.update(existingContact.id, existingContact).then(() => {\n          // Udpate in app\n          let updateContacts = contacts.map(contact => {\n            if(contact.name === newName){\n              contact.number = newNumber;\n            }\n            return contact\n          })\n          setContacts(updateContacts)\n          setNotification({\n            text: `Updated ${existingContact.name} number to ${newNumber}`,\n            type: 'success'\n          })\n          setTimeout(() => {\n            setNotification('')\n          }, 3000)\n        })\n      }\n\n    }else{\n      contactService.create({\n        name: newName,\n        number: newNumber\n      }).then(person => {\n        let newContacts = contacts.concat({name: person.name, number: person.number, id: person.id}) \n        setContacts(newContacts)\n        setNotification({\n          text: `Added ${newName}`,\n          type: 'success'\n        })\n        setTimeout(() => {\n          setNotification('')\n        }, 3000)\n      }).catch(error => {\n        alert(`Error uploading to server: ${error}`)\n      })\n    }\n\n    setNewName('')\n    setNewNumber('')\n  }\n\n  return (\n    <form>\n      <div>\n        name: <input value={newName} onChange={changeNewName} /><br />\n        number: <input value={newNumber} onChange={changeNewNumber} /> \n      </div>\n      <div>\n        <button onClick={(e) => handleNewContact(e)}>add</button>\n      </div>\n    </form>\n  )\n}\n\nexport default PersonsForm","const Filter = ({setFilterName}) => {\n\n  const changeFilterName = (event) => {\n    setFilterName(event.target.value)\n  }\n\n  return (\n    <div>\n      Filter results: <input onChange={changeFilterName}/>\n    </div>\n  )\n}\n\nexport default Filter","\nconst Notification = ({message}) => {\n    if(message===null || message===''){\n        return null\n    }\n    \n    return (\n        <div className={message.type}>\n            {message.text}\n        </div>\n    )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport PersonsList from \"./PersonsList\";\nimport PersonsForm from \"./PersonsForm\";\nimport Filter from \"./Filter\";\nimport Notification from './Notification'\n\nimport contactService from './services/contacts';\n\nimport './style.css'\n\nconst App = () => {\n  const [ contacts, setContacts ] = useState([])\n  \n  const [ filterName, setFilterName] = useState('')\n  const [ notification, setNotification ] = useState('')\n  \n  useEffect(() => {\n    contactService.getAll()\n      .then(initialContacts => {\n        setContacts(initialContacts)\n      })\n    },[])\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notification} />\n      <Filter setFilterName={setFilterName} />\n      <h2>Add new</h2>\n      <PersonsForm contacts={contacts} setContacts={setContacts}  setNotification={setNotification}/>\n      <h2>Numbers</h2>\n      <PersonsList filterName={filterName} contacts={contacts} setContacts={setContacts} setNotification={setNotification}/>\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App.js'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}