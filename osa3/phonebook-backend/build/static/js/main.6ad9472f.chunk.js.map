{"version":3,"sources":["services/contacts.js","PersonsList.js","PersonsForm.js","Filter.js","Notification.js","App.js","index.js"],"names":["baseUrl","contactService","getAll","axios","get","then","response","data","create","newContact","post","deleteById","id","delete","update","updatedContact","put","PersonsList","contacts","setContacts","filterName","setNotification","contactList","filter","person","name","toLowerCase","includes","map","number","onClick","existingContact","find","contact","window","confirm","text","type","setTimeout","catch","error","deleteContact","PersonsForm","useState","newName","setNewName","newNumber","setNewNumber","value","onChange","event","target","e","preventDefault","some","updateContacts","newContacts","concat","handleNewContact","Filter","setFilterName","Notification","message","className","App","notification","useEffect","initialContacts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6ad9472f.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => {\r\n        return response.data\r\n    })\r\n}\r\n\r\nconst create = newContact => {\r\n    const request = axios.post(baseUrl, newContact)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deleteById = id => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, updatedContact) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, updatedContact)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst contactService = {\r\n    getAll,\r\n    create,\r\n    deleteById,\r\n    update\r\n}\r\n\r\nexport default contactService;","import contactService from './services/contacts'\r\n\r\nconst PersonsList = ({contacts, setContacts, filterName, setNotification}) => {\r\n  \r\n  const contactList =\r\n    filterName === '' ?\r\n      contacts :\r\n      contacts.filter(person => person.name.toLowerCase().includes(filterName.toLowerCase()))\r\n\r\n  const deleteContact = (id) => {\r\n    let existingContact = contacts.find(contact => contact.id === id)\r\n\r\n    if(!window.confirm(`Delete contact ${existingContact.name}?`)){\r\n      return\r\n    }\r\n    contactService\r\n      .deleteById(id)\r\n      .then(response => {\r\n        const updatedContact = contacts.filter(person => person.id !== id)\r\n        setContacts(updatedContact)\r\n        setNotification({\r\n          text: `Deleted contact ${existingContact.name}`,\r\n          type: 'success'\r\n        })\r\n        setTimeout(() => {\r\n          setNotification('')\r\n        }, 3000)\r\n      })\r\n      .catch(error => {\r\n        const updatedContact = contacts.filter(person => person.id !== id)\r\n        setContacts(updatedContact)\r\n        \r\n        setNotification({\r\n          text: `Information of ${existingContact.name} has already been deleted`,\r\n          type: 'error'\r\n        })\r\n        setTimeout(() => {\r\n          setNotification('')\r\n        }, 3000)\r\n      })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {contactList.map(person => \r\n        <li key={person.id}>{person.id}: {person.name} {person.number} <button onClick={()=>deleteContact(person.id)}>Delete</button></li>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PersonsList"," import {useState} from \"react\";\r\n\r\n import contactService from './services/contacts'\r\n\r\n\r\nconst PersonsForm = ({contacts, setContacts, setNotification}) => {\r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newNumber, setNewNumber] = useState('')\r\n\r\n\r\n  const changeNewName = (event) => {\r\n    setNewName(event.target.value)\r\n  }\r\n  const changeNewNumber = (event) => {\r\n    setNewNumber(event.target.value)\r\n  }\r\n\r\n  const handleNewContact = (e) => {\r\n    // pevent from submit\r\n    e.preventDefault()\r\n\r\n\r\n    // make sure name isnt in list already\r\n    if (contacts.some(person => person.name === newName)) {\r\n      // Find contact from list\r\n      let existingContact = contacts.find(contact => contact.name === newName)\r\n\r\n      if(window.confirm(`${newName} already added. want to update number?`)){\r\n        // Update in database\r\n        existingContact.number = newNumber\r\n        contactService\r\n          .update(existingContact.id, existingContact)\r\n          .then(() => {\r\n          // Udpate in app\r\n          let updateContacts = contacts.map(contact => {\r\n            if(contact.name === newName){\r\n              contact.number = newNumber;\r\n            }\r\n            return contact\r\n          })\r\n          setContacts(updateContacts)\r\n          setNotification({\r\n            text: `Updated ${existingContact.name} number to ${newNumber}`,\r\n            type: 'success'\r\n          })\r\n          setTimeout(() => {\r\n            setNotification('')\r\n          }, 3000)\r\n        }).catch(error => {\r\n          setNotification({\r\n            text: `${error.response.data.error}`,\r\n            type: 'error'\r\n          })\r\n          setTimeout(() => {\r\n            setNotification('')\r\n          }, 3000)\r\n        })\r\n      }\r\n\r\n    }else{\r\n      contactService\r\n        .create({\r\n          name: newName,\r\n          number: newNumber\r\n        })\r\n        .then(person => {\r\n          let newContacts = contacts.concat({name: person.name, number: person.number, id: person.id}) \r\n          setContacts(newContacts)\r\n          setNotification({\r\n            text: `Added ${newName}`,\r\n            type: 'success'\r\n          })\r\n          setTimeout(() => {\r\n            setNotification('')\r\n          }, 3000)\r\n        })\r\n        .catch(error => {\r\n          setNotification({\r\n            text: `${error.response.data.error}`,\r\n            type: 'error'\r\n          })\r\n          setTimeout(() => {\r\n            setNotification('')\r\n          }, 3000)\r\n        })\r\n    }\r\n\r\n    setNewName('')\r\n    setNewNumber('')\r\n  }\r\n\r\n  return (\r\n    <form>\r\n      <div>\r\n        name: <input value={newName} onChange={changeNewName} /><br />\r\n        number: <input value={newNumber} onChange={changeNewNumber} /> \r\n      </div>\r\n      <div>\r\n        <button onClick={(e) => handleNewContact(e)}>add</button>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default PersonsForm","const Filter = ({setFilterName}) => {\r\n\r\n  const changeFilterName = (event) => {\r\n    setFilterName(event.target.value)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      Filter results: <input onChange={changeFilterName}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Filter","\r\nconst Notification = ({message}) => {\r\n    if(message===null || message===''){\r\n        return null\r\n    }\r\n    \r\n    return (\r\n        <div className={message.type}>\r\n            {message.text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\r\nimport PersonsList from \"./PersonsList\";\r\nimport PersonsForm from \"./PersonsForm\";\r\nimport Filter from \"./Filter\";\r\nimport Notification from './Notification'\r\n\r\nimport contactService from './services/contacts';\r\n\r\nimport './style.css'\r\n\r\nconst App = () => {\r\n  const [ contacts, setContacts ] = useState([])\r\n  \r\n  const [ filterName, setFilterName] = useState('')\r\n  const [ notification, setNotification ] = useState('')\r\n  \r\n  useEffect(() => {\r\n    contactService.getAll()\r\n      .then(initialContacts => {\r\n        setContacts(initialContacts)\r\n      })\r\n    },[])\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Notification message={notification} />\r\n      <Filter setFilterName={setFilterName} />\r\n      <h2>Add new</h2>\r\n      <PersonsForm contacts={contacts} setContacts={setContacts}  setNotification={setNotification}/>\r\n      <h2>Numbers</h2>\r\n      <PersonsList filterName={filterName} contacts={contacts} setContacts={setContacts} setNotification={setNotification}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App.js'\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}